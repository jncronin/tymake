// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-JOHN
// DateTime: 15/03/2015 12:06:13
// UserName: jncronin
// Input file <tymake.y - 15/03/2015 12:06:01>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using tymake;

namespace tymakeParse
{
internal enum Tokens {error=2,EOF=3,EQUALS=4,COLON=5,MUL=6,
    LPAREN=7,RPAREN=8,AMP=9,PLUS=10,MINUS=11,DOLLARS=12,
    COMMA=13,NEWLINE=14,FUNC=15,ASSIGN=16,NOT=17,NOTEQUAL=18,
    LEQUAL=19,GEQUAL=20,LBRACE=21,RBRACE=22,LBRACK=23,RBRACK=24,
    DOT=25,LT=26,GT=27,SEMICOLON=28,LOR=29,LAND=30,
    OR=31,AND=32,APPEND=33,ASSIGNIF=34,IF=35,ELSE=36,
    INCLUDE=37,RULEFOR=38,INPUTS=39,DEPENDS=40,ALWAYS=41,SHELLCMD=42,
    TYPROJECT=43,SOURCES=44,MKDIR=45,FUNCTION=46,RETURN=47,EXPORT=48,
    ISDIR=49,ISFILE=50,DEFINED=51,BUILD=52,INTEGER=53,STRING=54,
    VOID=55,ARRAY=56,OBJECT=57,FOR=58,FOREACH=59,IN=60,
    WHILE=61,DO=62,INT=63,LABEL=64};

internal partial struct ValueType
#line 17 "tymake.y"
       {
		public int intval;
		public string strval;
		public Statement stmtval;
		public Expression exprval;
		public List<Expression> exprlist;
		public tymakeParse.Tokens tokval;
		public Expression.EvalResult.ResultType typeval;
		public FunctionStatement.FunctionArg argval;
		public List<FunctionStatement.FunctionArg> arglistval;
		public List<ObjDef> objdeflist;
		public ObjDef objdefval;
		public bool bval;
	}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[114];
  private static State[] states = new State[207];
  private static string[] nonTerms = new string[] {
      "file", "expr", "expr2", "expr3", "expr4", "expr5", "expr6", "expr7", "expr8", 
      "expr9", "expr10", "expr11", "strlabelexpr", "depends", "funccall", "labelexpr", 
      "labelexpr2", "stmtblock", "stmtlist", "stmt", "stmt2", "define", "ifblock", 
      "makerule", "cmd", "include", "strlabel", "funcdef", "forblock", "foreachblock", 
      "whileblock", "doblock", "dependsblock", "dependslist", "exprlist", "dependsstmt", 
      "inputsstmt", "arrayexpr", "assignop", "arg", "argtype", "arglist", "export", 
      "objmember", "objlist", "objexpr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{21,4,64,11,48,96,35,101,58,108,59,119,61,127,62,133,42,181,45,185,52,189,47,193,54,55,37,201,3,-2,38,-113,46,-113},new int[]{-1,1,-18,3,-19,206,-20,205,-21,8,-22,9,-23,100,-29,107,-30,118,-31,126,-32,132,-43,139,-25,179,-15,195,-13,196,-16,56,-17,57,-26,199});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{64,11,48,96,35,101,58,108,59,119,61,127,62,133,42,181,45,185,52,189,47,193,54,55,37,201,38,-113,46,-113},new int[]{-19,5,-20,205,-21,8,-22,9,-23,100,-29,107,-30,118,-31,126,-32,132,-43,139,-25,179,-15,195,-13,196,-16,56,-17,57,-26,199});
    states[5] = new State(new int[]{22,6,64,11,48,96,35,101,58,108,59,119,61,127,62,133,42,181,45,185,52,189,47,193,54,55,37,201,38,-113,46,-113},new int[]{-20,7,-21,8,-22,9,-23,100,-29,107,-30,118,-31,126,-32,132,-43,139,-25,179,-15,195,-13,196,-16,56,-17,57,-26,199});
    states[6] = new State(-14);
    states[7] = new State(-16);
    states[8] = new State(-17);
    states[9] = new State(new int[]{28,10});
    states[10] = new State(-18);
    states[11] = new State(new int[]{7,50,16,93,34,94,33,95,25,-12,23,-12},new int[]{-39,12});
    states[12] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,13,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[13] = new State(-29);
    states[14] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-3,15,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[15] = new State(new int[]{8,16});
    states[16] = new State(-65);
    states[17] = new State(new int[]{29,18,28,-68,8,-68,13,-68,24,-68,21,-68,39,-68,40,-68,41,-68,22,-68});
    states[18] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-3,19,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[19] = new State(-67);
    states[20] = new State(new int[]{30,21,29,-70,28,-70,8,-70,13,-70,24,-70,21,-70,39,-70,40,-70,41,-70,22,-70});
    states[21] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-4,22,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[22] = new State(-69);
    states[23] = new State(new int[]{31,24,30,-72,29,-72,28,-72,8,-72,13,-72,24,-72,21,-72,39,-72,40,-72,41,-72,22,-72});
    states[24] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-5,25,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[25] = new State(-71);
    states[26] = new State(new int[]{32,27,31,-74,30,-74,29,-74,28,-74,8,-74,13,-74,24,-74,21,-74,39,-74,40,-74,41,-74,22,-74});
    states[27] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-6,28,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[28] = new State(-73);
    states[29] = new State(new int[]{4,30,18,91,32,-77,31,-77,30,-77,29,-77,28,-77,8,-77,13,-77,24,-77,21,-77,39,-77,40,-77,41,-77,22,-77});
    states[30] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-7,31,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[31] = new State(-75);
    states[32] = new State(new int[]{26,33,27,85,19,87,20,89,4,-82,18,-82,32,-82,31,-82,30,-82,29,-82,28,-82,8,-82,13,-82,24,-82,21,-82,39,-82,40,-82,41,-82,22,-82});
    states[33] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-8,34,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[34] = new State(-78);
    states[35] = new State(new int[]{10,36,11,83,26,-85,27,-85,19,-85,20,-85,4,-85,18,-85,32,-85,31,-85,30,-85,29,-85,28,-85,8,-85,13,-85,24,-85,21,-85,39,-85,40,-85,41,-85,22,-85});
    states[36] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-9,37,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[37] = new State(-83);
    states[38] = new State(new int[]{6,39,10,-87,11,-87,26,-87,27,-87,19,-87,20,-87,4,-87,18,-87,32,-87,31,-87,30,-87,29,-87,28,-87,8,-87,13,-87,24,-87,21,-87,39,-87,40,-87,41,-87,22,-87});
    states[39] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-10,40,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[40] = new State(-86);
    states[41] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-11,42,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[42] = new State(-88);
    states[43] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-11,44,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[44] = new State(-89);
    states[45] = new State(-90);
    states[46] = new State(new int[]{25,47,23,80,6,-91,10,-91,11,-91,26,-91,27,-91,19,-91,20,-91,4,-91,18,-91,32,-91,31,-91,30,-91,29,-91,28,-91,8,-91,13,-91,24,-91,21,-91,39,-91,40,-91,41,-91,22,-91});
    states[47] = new State(new int[]{64,49},new int[]{-17,48,-15,58});
    states[48] = new State(-10);
    states[49] = new State(new int[]{7,50,25,-12,23,-12,6,-12,10,-12,11,-12,26,-12,27,-12,19,-12,20,-12,4,-12,18,-12,32,-12,31,-12,30,-12,29,-12,28,-12,8,-12,13,-12,24,-12,21,-12,39,-12,40,-12,41,-12,22,-12});
    states[50] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73,8,-60,13,-60},new int[]{-35,51,-3,77,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[51] = new State(new int[]{8,52,13,53});
    states[52] = new State(-101);
    states[53] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-3,54,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[54] = new State(-58);
    states[55] = new State(-7);
    states[56] = new State(-8);
    states[57] = new State(-9);
    states[58] = new State(-13);
    states[59] = new State(-92);
    states[60] = new State(-93);
    states[61] = new State(new int[]{17,41,11,43,54,55,64,78,63,59,23,61,51,73,24,-60,13,-60},new int[]{-35,62,-45,64,-3,77,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72,-44,79});
    states[62] = new State(new int[]{24,63,13,53});
    states[63] = new State(-96);
    states[64] = new State(new int[]{24,65,13,66});
    states[65] = new State(-97);
    states[66] = new State(new int[]{64,68},new int[]{-44,67});
    states[67] = new State(-99);
    states[68] = new State(new int[]{16,69});
    states[69] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,70,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[70] = new State(-100);
    states[71] = new State(-66);
    states[72] = new State(-94);
    states[73] = new State(new int[]{7,74});
    states[74] = new State(new int[]{64,75});
    states[75] = new State(new int[]{8,76});
    states[76] = new State(-95);
    states[77] = new State(-59);
    states[78] = new State(new int[]{7,50,16,69,25,-12,23,-12,6,-12,10,-12,11,-12,26,-12,27,-12,19,-12,20,-12,4,-12,18,-12,32,-12,31,-12,30,-12,29,-12,24,-12,13,-12});
    states[79] = new State(-98);
    states[80] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,81,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[81] = new State(new int[]{24,82});
    states[82] = new State(-11);
    states[83] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-9,84,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[84] = new State(-84);
    states[85] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-8,86,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[86] = new State(-79);
    states[87] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-8,88,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[88] = new State(-80);
    states[89] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-8,90,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[90] = new State(-81);
    states[91] = new State(new int[]{17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-7,92,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[92] = new State(-76);
    states[93] = new State(-30);
    states[94] = new State(-31);
    states[95] = new State(-32);
    states[96] = new State(new int[]{64,99,38,-112,46,-112},new int[]{-22,97});
    states[97] = new State(new int[]{28,98});
    states[98] = new State(-19);
    states[99] = new State(new int[]{16,93,34,94,33,95,28,-49},new int[]{-39,12});
    states[100] = new State(-20);
    states[101] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,102,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[102] = new State(new int[]{21,4},new int[]{-18,103});
    states[103] = new State(new int[]{36,104,64,-33,48,-33,35,-33,58,-33,59,-33,61,-33,62,-33,42,-33,45,-33,52,-33,47,-33,54,-33,37,-33,38,-33,46,-33,3,-33,22,-33});
    states[104] = new State(new int[]{21,4,35,101},new int[]{-18,105,-23,106});
    states[105] = new State(-34);
    states[106] = new State(-35);
    states[107] = new State(-21);
    states[108] = new State(new int[]{7,109});
    states[109] = new State(new int[]{64,117},new int[]{-22,110});
    states[110] = new State(new int[]{28,111});
    states[111] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,112,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[112] = new State(new int[]{28,113});
    states[113] = new State(new int[]{64,117},new int[]{-22,114});
    states[114] = new State(new int[]{8,115});
    states[115] = new State(new int[]{21,4},new int[]{-18,116});
    states[116] = new State(-36);
    states[117] = new State(new int[]{16,93,34,94,33,95},new int[]{-39,12});
    states[118] = new State(-22);
    states[119] = new State(new int[]{7,120});
    states[120] = new State(new int[]{64,121});
    states[121] = new State(new int[]{60,122});
    states[122] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,123,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[123] = new State(new int[]{8,124});
    states[124] = new State(new int[]{21,4},new int[]{-18,125});
    states[125] = new State(-37);
    states[126] = new State(-23);
    states[127] = new State(new int[]{7,128});
    states[128] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,129,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[129] = new State(new int[]{8,130});
    states[130] = new State(new int[]{21,4},new int[]{-18,131});
    states[131] = new State(-38);
    states[132] = new State(-24);
    states[133] = new State(new int[]{21,4},new int[]{-18,134});
    states[134] = new State(new int[]{61,135});
    states[135] = new State(new int[]{7,136});
    states[136] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,137,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[137] = new State(new int[]{8,138});
    states[138] = new State(-39);
    states[139] = new State(new int[]{38,142,46,163},new int[]{-24,140,-28,141});
    states[140] = new State(-25);
    states[141] = new State(-26);
    states[142] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73},new int[]{-2,143,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[143] = new State(new int[]{39,161,40,-45,41,-45,21,-45},new int[]{-37,144});
    states[144] = new State(new int[]{40,147,41,160,21,-43},new int[]{-36,145});
    states[145] = new State(new int[]{21,4},new int[]{-18,146});
    states[146] = new State(-40);
    states[147] = new State(new int[]{21,149},new int[]{-33,148});
    states[148] = new State(-41);
    states[149] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73,43,155,42,157,22,-57,13,-57},new int[]{-34,150,-14,159,-2,154,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[150] = new State(new int[]{22,151,13,152});
    states[151] = new State(-54);
    states[152] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73,43,155,42,157},new int[]{-14,153,-2,154,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[153] = new State(-56);
    states[154] = new State(-61);
    states[155] = new State(new int[]{54,55,64,49},new int[]{-13,156,-16,56,-17,57,-15,58});
    states[156] = new State(new int[]{25,47,23,80,22,-62,13,-62});
    states[157] = new State(new int[]{54,55,64,49},new int[]{-13,158,-16,56,-17,57,-15,58});
    states[158] = new State(new int[]{25,47,23,80,22,-63,13,-63});
    states[159] = new State(-55);
    states[160] = new State(-42);
    states[161] = new State(new int[]{21,149},new int[]{-33,162});
    states[162] = new State(-44);
    states[163] = new State(new int[]{64,164});
    states[164] = new State(new int[]{7,165});
    states[165] = new State(new int[]{53,173,54,174,56,175,57,176,55,177,8,-105,13,-105},new int[]{-42,166,-40,178,-41,171});
    states[166] = new State(new int[]{8,167,13,169});
    states[167] = new State(new int[]{21,4},new int[]{-18,168});
    states[168] = new State(-102);
    states[169] = new State(new int[]{53,173,54,174,56,175,57,176,55,177},new int[]{-40,170,-41,171});
    states[170] = new State(-103);
    states[171] = new State(new int[]{64,172});
    states[172] = new State(-111);
    states[173] = new State(-106);
    states[174] = new State(-107);
    states[175] = new State(-108);
    states[176] = new State(-109);
    states[177] = new State(-110);
    states[178] = new State(-104);
    states[179] = new State(new int[]{28,180});
    states[180] = new State(-27);
    states[181] = new State(new int[]{7,182});
    states[182] = new State(new int[]{54,55,64,49},new int[]{-13,183,-16,56,-17,57,-15,58});
    states[183] = new State(new int[]{8,184,25,47,23,80});
    states[184] = new State(-46);
    states[185] = new State(new int[]{7,186});
    states[186] = new State(new int[]{54,55,64,49},new int[]{-13,187,-16,56,-17,57,-15,58});
    states[187] = new State(new int[]{8,188,25,47,23,80});
    states[188] = new State(-47);
    states[189] = new State(new int[]{7,190});
    states[190] = new State(new int[]{54,55,64,49},new int[]{-13,191,-16,56,-17,57,-15,58});
    states[191] = new State(new int[]{8,192,25,47,23,80});
    states[192] = new State(-48);
    states[193] = new State(new int[]{7,14,17,41,11,43,54,55,64,49,63,59,23,61,51,73,28,-51},new int[]{-2,194,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[194] = new State(-50);
    states[195] = new State(new int[]{28,-52,25,-13,23,-13});
    states[196] = new State(new int[]{25,197,23,80});
    states[197] = new State(new int[]{64,49},new int[]{-17,198,-15,58});
    states[198] = new State(new int[]{28,-53,25,-10,23,-10});
    states[199] = new State(new int[]{28,200});
    states[200] = new State(-28);
    states[201] = new State(new int[]{54,203,64,204},new int[]{-27,202});
    states[202] = new State(-64);
    states[203] = new State(-5);
    states[204] = new State(-6);
    states[205] = new State(-15);
    states[206] = new State(new int[]{64,11,48,96,35,101,58,108,59,119,61,127,62,133,42,181,45,185,52,189,47,193,54,55,37,201,3,-4,38,-113,46,-113},new int[]{-20,7,-21,8,-22,9,-23,100,-29,107,-30,118,-31,126,-32,132,-43,139,-25,179,-15,195,-13,196,-16,56,-17,57,-26,199});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-47, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-18});
    rules[4] = new Rule(-1, new int[]{-19});
    rules[5] = new Rule(-27, new int[]{54});
    rules[6] = new Rule(-27, new int[]{64});
    rules[7] = new Rule(-13, new int[]{54});
    rules[8] = new Rule(-13, new int[]{-16});
    rules[9] = new Rule(-16, new int[]{-17});
    rules[10] = new Rule(-16, new int[]{-13,25,-17});
    rules[11] = new Rule(-16, new int[]{-13,23,-2,24});
    rules[12] = new Rule(-17, new int[]{64});
    rules[13] = new Rule(-17, new int[]{-15});
    rules[14] = new Rule(-18, new int[]{21,-19,22});
    rules[15] = new Rule(-19, new int[]{-20});
    rules[16] = new Rule(-19, new int[]{-19,-20});
    rules[17] = new Rule(-20, new int[]{-21});
    rules[18] = new Rule(-21, new int[]{-22,28});
    rules[19] = new Rule(-21, new int[]{48,-22,28});
    rules[20] = new Rule(-21, new int[]{-23});
    rules[21] = new Rule(-21, new int[]{-29});
    rules[22] = new Rule(-21, new int[]{-30});
    rules[23] = new Rule(-21, new int[]{-31});
    rules[24] = new Rule(-21, new int[]{-32});
    rules[25] = new Rule(-21, new int[]{-43,-24});
    rules[26] = new Rule(-21, new int[]{-43,-28});
    rules[27] = new Rule(-21, new int[]{-25,28});
    rules[28] = new Rule(-21, new int[]{-26,28});
    rules[29] = new Rule(-22, new int[]{64,-39,-2});
    rules[30] = new Rule(-39, new int[]{16});
    rules[31] = new Rule(-39, new int[]{34});
    rules[32] = new Rule(-39, new int[]{33});
    rules[33] = new Rule(-23, new int[]{35,-2,-18});
    rules[34] = new Rule(-23, new int[]{35,-2,-18,36,-18});
    rules[35] = new Rule(-23, new int[]{35,-2,-18,36,-23});
    rules[36] = new Rule(-29, new int[]{58,7,-22,28,-2,28,-22,8,-18});
    rules[37] = new Rule(-30, new int[]{59,7,64,60,-2,8,-18});
    rules[38] = new Rule(-31, new int[]{61,7,-2,8,-18});
    rules[39] = new Rule(-32, new int[]{62,-18,61,7,-2,8});
    rules[40] = new Rule(-24, new int[]{38,-2,-37,-36,-18});
    rules[41] = new Rule(-36, new int[]{40,-33});
    rules[42] = new Rule(-36, new int[]{41});
    rules[43] = new Rule(-36, new int[]{});
    rules[44] = new Rule(-37, new int[]{39,-33});
    rules[45] = new Rule(-37, new int[]{});
    rules[46] = new Rule(-25, new int[]{42,7,-13,8});
    rules[47] = new Rule(-25, new int[]{45,7,-13,8});
    rules[48] = new Rule(-25, new int[]{52,7,-13,8});
    rules[49] = new Rule(-25, new int[]{48,64});
    rules[50] = new Rule(-25, new int[]{47,-2});
    rules[51] = new Rule(-25, new int[]{47});
    rules[52] = new Rule(-25, new int[]{-15});
    rules[53] = new Rule(-25, new int[]{-13,25,-17});
    rules[54] = new Rule(-33, new int[]{21,-34,22});
    rules[55] = new Rule(-34, new int[]{-14});
    rules[56] = new Rule(-34, new int[]{-34,13,-14});
    rules[57] = new Rule(-34, new int[]{});
    rules[58] = new Rule(-35, new int[]{-35,13,-3});
    rules[59] = new Rule(-35, new int[]{-3});
    rules[60] = new Rule(-35, new int[]{});
    rules[61] = new Rule(-14, new int[]{-2});
    rules[62] = new Rule(-14, new int[]{43,-13});
    rules[63] = new Rule(-14, new int[]{42,-13});
    rules[64] = new Rule(-26, new int[]{37,-27});
    rules[65] = new Rule(-2, new int[]{7,-3,8});
    rules[66] = new Rule(-2, new int[]{-3});
    rules[67] = new Rule(-3, new int[]{-4,29,-3});
    rules[68] = new Rule(-3, new int[]{-4});
    rules[69] = new Rule(-4, new int[]{-5,30,-4});
    rules[70] = new Rule(-4, new int[]{-5});
    rules[71] = new Rule(-5, new int[]{-6,31,-5});
    rules[72] = new Rule(-5, new int[]{-6});
    rules[73] = new Rule(-6, new int[]{-7,32,-6});
    rules[74] = new Rule(-6, new int[]{-7});
    rules[75] = new Rule(-7, new int[]{-8,4,-7});
    rules[76] = new Rule(-7, new int[]{-8,18,-7});
    rules[77] = new Rule(-7, new int[]{-8});
    rules[78] = new Rule(-8, new int[]{-9,26,-8});
    rules[79] = new Rule(-8, new int[]{-9,27,-8});
    rules[80] = new Rule(-8, new int[]{-9,19,-8});
    rules[81] = new Rule(-8, new int[]{-9,20,-8});
    rules[82] = new Rule(-8, new int[]{-9});
    rules[83] = new Rule(-9, new int[]{-10,10,-9});
    rules[84] = new Rule(-9, new int[]{-10,11,-9});
    rules[85] = new Rule(-9, new int[]{-10});
    rules[86] = new Rule(-10, new int[]{-11,6,-10});
    rules[87] = new Rule(-10, new int[]{-11});
    rules[88] = new Rule(-11, new int[]{17,-11});
    rules[89] = new Rule(-11, new int[]{11,-11});
    rules[90] = new Rule(-11, new int[]{-12});
    rules[91] = new Rule(-12, new int[]{-13});
    rules[92] = new Rule(-12, new int[]{63});
    rules[93] = new Rule(-12, new int[]{-38});
    rules[94] = new Rule(-12, new int[]{-46});
    rules[95] = new Rule(-12, new int[]{51,7,64,8});
    rules[96] = new Rule(-38, new int[]{23,-35,24});
    rules[97] = new Rule(-46, new int[]{23,-45,24});
    rules[98] = new Rule(-45, new int[]{-44});
    rules[99] = new Rule(-45, new int[]{-45,13,-44});
    rules[100] = new Rule(-44, new int[]{64,16,-2});
    rules[101] = new Rule(-15, new int[]{64,7,-35,8});
    rules[102] = new Rule(-28, new int[]{46,64,7,-42,8,-18});
    rules[103] = new Rule(-42, new int[]{-42,13,-40});
    rules[104] = new Rule(-42, new int[]{-40});
    rules[105] = new Rule(-42, new int[]{});
    rules[106] = new Rule(-41, new int[]{53});
    rules[107] = new Rule(-41, new int[]{54});
    rules[108] = new Rule(-41, new int[]{56});
    rules[109] = new Rule(-41, new int[]{57});
    rules[110] = new Rule(-41, new int[]{55});
    rules[111] = new Rule(-40, new int[]{-41,64});
    rules[112] = new Rule(-43, new int[]{48});
    rules[113] = new Rule(-43, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // file -> /* empty */
#line 48 "tymake.y"
                { output = new StatementList(); }
#line default
        break;
      case 3: // file -> stmtblock
#line 49 "tymake.y"
                    { output = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 4: // file -> stmtlist
#line 50 "tymake.y"
                   { output = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 5: // strlabel -> STRING
#line 53 "tymake.y"
                        { CurrentSemanticValue.stmtval = new StringStatement { val = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 6: // strlabel -> LABEL
#line 54 "tymake.y"
                 { CurrentSemanticValue.stmtval = new LabelStatement { val = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 7: // strlabelexpr -> STRING
#line 57 "tymake.y"
                           { CurrentSemanticValue.exprval = new StringExpression { val = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 8: // strlabelexpr -> labelexpr
#line 58 "tymake.y"
                    { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 9: // labelexpr -> labelexpr2
#line 61 "tymake.y"
                            { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 10: // labelexpr -> strlabelexpr, DOT, labelexpr2
#line 62 "tymake.y"
                                  { CurrentSemanticValue.exprval = new LabelMemberExpression { label = ValueStack[ValueStack.Depth-3].exprval, member = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 11: // labelexpr -> strlabelexpr, LBRACK, expr, RBRACK
#line 63 "tymake.y"
                                     { CurrentSemanticValue.exprval = new LabelIndexedExpression { label = ValueStack[ValueStack.Depth-4].exprval, index = ValueStack[ValueStack.Depth-2].exprval }; }
#line default
        break;
      case 12: // labelexpr2 -> LABEL
#line 66 "tymake.y"
                         { CurrentSemanticValue.exprval = new LabelExpression { val = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 13: // labelexpr2 -> funccall
#line 67 "tymake.y"
                   { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 14: // stmtblock -> LBRACE, stmtlist, RBRACE
#line 70 "tymake.y"
                                     { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 15: // stmtlist -> stmt
#line 73 "tymake.y"
                      { StatementList sl = new StatementList(); sl.list = new List<Statement>(); sl.list.Add(ValueStack[ValueStack.Depth-1].stmtval); CurrentSemanticValue.stmtval = sl; }
#line default
        break;
      case 16: // stmtlist -> stmtlist, stmt
#line 74 "tymake.y"
                       { ((StatementList)ValueStack[ValueStack.Depth-2].stmtval).list.Add(ValueStack[ValueStack.Depth-1].stmtval); CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 17: // stmt -> stmt2
#line 77 "tymake.y"
                    { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 18: // stmt2 -> define, SEMICOLON
#line 80 "tymake.y"
                             { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 19: // stmt2 -> EXPORT, define, SEMICOLON
#line 81 "tymake.y"
                               { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; ValueStack[ValueStack.Depth-2].stmtval.export = true; }
#line default
        break;
      case 20: // stmt2 -> ifblock
#line 82 "tymake.y"
                   { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 21: // stmt2 -> forblock
#line 83 "tymake.y"
                   { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 22: // stmt2 -> foreachblock
#line 84 "tymake.y"
                      { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 23: // stmt2 -> whileblock
#line 85 "tymake.y"
                     { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 24: // stmt2 -> doblock
#line 86 "tymake.y"
                   { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 25: // stmt2 -> export, makerule
#line 87 "tymake.y"
                         { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; ValueStack[ValueStack.Depth-1].stmtval.export = ValueStack[ValueStack.Depth-2].bval; }
#line default
        break;
      case 26: // stmt2 -> export, funcdef
#line 88 "tymake.y"
                        { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; ValueStack[ValueStack.Depth-1].stmtval.export = ValueStack[ValueStack.Depth-2].bval; }
#line default
        break;
      case 27: // stmt2 -> cmd, SEMICOLON
#line 89 "tymake.y"
                       { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 28: // stmt2 -> include, SEMICOLON
#line 90 "tymake.y"
                          { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 29: // define -> LABEL, assignop, expr
#line 93 "tymake.y"
                                 { CurrentSemanticValue.stmtval = new DefineExprStatement { tok_name = ValueStack[ValueStack.Depth-3].strval, assignop = ValueStack[ValueStack.Depth-2].tokval, val = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 30: // assignop -> ASSIGN
#line 96 "tymake.y"
                        { CurrentSemanticValue.tokval = Tokens.ASSIGN; }
#line default
        break;
      case 31: // assignop -> ASSIGNIF
#line 97 "tymake.y"
                   { CurrentSemanticValue.tokval = Tokens.ASSIGNIF; }
#line default
        break;
      case 32: // assignop -> APPEND
#line 98 "tymake.y"
                  { CurrentSemanticValue.tokval = Tokens.APPEND; }
#line default
        break;
      case 33: // ifblock -> IF, expr, stmtblock
#line 101 "tymake.y"
                                 { CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-2].exprval, if_block = ValueStack[ValueStack.Depth-1].stmtval, else_block = null }; }
#line default
        break;
      case 34: // ifblock -> IF, expr, stmtblock, ELSE, stmtblock
#line 102 "tymake.y"
                                      { CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-4].exprval, if_block = ValueStack[ValueStack.Depth-3].stmtval, else_block = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 35: // ifblock -> IF, expr, stmtblock, ELSE, ifblock
#line 103 "tymake.y"
                                     { CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-4].exprval, if_block = ValueStack[ValueStack.Depth-3].stmtval, else_block = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 36: // forblock -> FOR, LPAREN, define, SEMICOLON, expr, SEMICOLON, define, RPAREN, 
               //             stmtblock
#line 106 "tymake.y"
                                                                              { CurrentSemanticValue.stmtval = new ForBlockStatement { init = ValueStack[ValueStack.Depth-7].stmtval, test = ValueStack[ValueStack.Depth-5].exprval, incr = ValueStack[ValueStack.Depth-3].stmtval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 37: // foreachblock -> FOREACH, LPAREN, LABEL, IN, expr, RPAREN, stmtblock
#line 109 "tymake.y"
                                                            { CurrentSemanticValue.stmtval = new ForEachBlock { val = ValueStack[ValueStack.Depth-5].strval, enumeration = ValueStack[ValueStack.Depth-3].exprval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 38: // whileblock -> WHILE, LPAREN, expr, RPAREN, stmtblock
#line 112 "tymake.y"
                                                { CurrentSemanticValue.stmtval = new WhileBlock { test = ValueStack[ValueStack.Depth-3].exprval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 39: // doblock -> DO, stmtblock, WHILE, LPAREN, expr, RPAREN
#line 115 "tymake.y"
                                                 { CurrentSemanticValue.stmtval = new DoBlock { test = ValueStack[ValueStack.Depth-2].exprval, code = ValueStack[ValueStack.Depth-5].stmtval }; }
#line default
        break;
      case 40: // makerule -> RULEFOR, expr, inputsstmt, dependsstmt, stmtblock
#line 118 "tymake.y"
                                                         { CurrentSemanticValue.stmtval = new MakeRuleStatement { output_file = ValueStack[ValueStack.Depth-4].exprval, inputs_list = ValueStack[ValueStack.Depth-3].exprlist, depend_list = ValueStack[ValueStack.Depth-2].exprlist, rules = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 41: // dependsstmt -> DEPENDS, dependsblock
#line 121 "tymake.y"
                                          { CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-1].exprlist; }
#line default
        break;
      case 42: // dependsstmt -> ALWAYS
#line 122 "tymake.y"
                       { CurrentSemanticValue.exprlist = null; }
#line default
        break;
      case 43: // dependsstmt -> /* empty */
#line 123 "tymake.y"
                  { CurrentSemanticValue.exprlist = new List<Expression>(); }
#line default
        break;
      case 44: // inputsstmt -> INPUTS, dependsblock
#line 126 "tymake.y"
                                         { CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-1].exprlist; }
#line default
        break;
      case 45: // inputsstmt -> /* empty */
#line 127 "tymake.y"
                  { CurrentSemanticValue.exprlist = new List<Expression>(); }
#line default
        break;
      case 46: // cmd -> SHELLCMD, LPAREN, strlabelexpr, RPAREN
#line 130 "tymake.y"
                                            { CurrentSemanticValue.stmtval = new ShellCommandStatement { shell_cmd = ValueStack[ValueStack.Depth-2].exprval }; }
#line default
        break;
      case 47: // cmd -> MKDIR, LPAREN, strlabelexpr, RPAREN
#line 131 "tymake.y"
                                      { CurrentSemanticValue.stmtval = new MkDirCommandStatement { dir = ValueStack[ValueStack.Depth-2].exprval }; }
#line default
        break;
      case 48: // cmd -> BUILD, LPAREN, strlabelexpr, RPAREN
#line 132 "tymake.y"
                                      { CurrentSemanticValue.stmtval = new BuildCommandStatement { fname = ValueStack[ValueStack.Depth-2].exprval }; }
#line default
        break;
      case 49: // cmd -> EXPORT, LABEL
#line 133 "tymake.y"
                       { CurrentSemanticValue.stmtval = new ExportStatement { v = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 50: // cmd -> RETURN, expr
#line 134 "tymake.y"
                       { CurrentSemanticValue.stmtval = new ReturnStatement { v = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 51: // cmd -> RETURN
#line 135 "tymake.y"
                   { CurrentSemanticValue.stmtval = new ReturnStatement { v = new ResultExpression { e = new Expression.EvalResult() } }; }
#line default
        break;
      case 52: // cmd -> funccall
#line 136 "tymake.y"
                    { CurrentSemanticValue.stmtval = new ExpressionStatement { expr = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 53: // cmd -> strlabelexpr, DOT, labelexpr2
#line 137 "tymake.y"
                                   { CurrentSemanticValue.stmtval = new ExpressionStatement { expr = new LabelMemberExpression { label = ValueStack[ValueStack.Depth-3].exprval, member = ValueStack[ValueStack.Depth-1].exprval } }; }
#line default
        break;
      case 54: // dependsblock -> LBRACE, dependslist, RBRACE
#line 140 "tymake.y"
                                         { CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-2].exprlist; }
#line default
        break;
      case 55: // dependslist -> depends
#line 143 "tymake.y"
                            { CurrentSemanticValue.exprlist = new List<Expression> { ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 56: // dependslist -> dependslist, COMMA, depends
#line 144 "tymake.y"
                                { List<Expression> l = new List<Expression>(ValueStack[ValueStack.Depth-3].exprlist); l.Add(ValueStack[ValueStack.Depth-1].exprval); CurrentSemanticValue.exprlist = l; }
#line default
        break;
      case 57: // dependslist -> /* empty */
#line 145 "tymake.y"
             { CurrentSemanticValue.exprlist = new List<Expression>(); }
#line default
        break;
      case 58: // exprlist -> exprlist, COMMA, expr2
#line 148 "tymake.y"
                                  { CurrentSemanticValue.exprlist = new List<Expression>(ValueStack[ValueStack.Depth-3].exprlist); CurrentSemanticValue.exprlist.Add(ValueStack[ValueStack.Depth-1].exprval); }
#line default
        break;
      case 59: // exprlist -> expr2
#line 149 "tymake.y"
                 { CurrentSemanticValue.exprlist = new List<Expression> { ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 60: // exprlist -> /* empty */
#line 150 "tymake.y"
             { CurrentSemanticValue.exprlist = new List<Expression>(); }
#line default
        break;
      case 61: // depends -> expr
#line 153 "tymake.y"
                      { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 62: // depends -> TYPROJECT, strlabelexpr
#line 154 "tymake.y"
                              { CurrentSemanticValue.exprval = new ProjectDepends { project = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 63: // depends -> SHELLCMD, strlabelexpr
#line 155 "tymake.y"
                             { CurrentSemanticValue.exprval = new ShellCmdDepends { shellcmd = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 64: // include -> INCLUDE, strlabel
#line 159 "tymake.y"
                               { CurrentSemanticValue.stmtval = new IncludeStatement { include_file = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 65: // expr -> LPAREN, expr2, RPAREN
#line 162 "tymake.y"
                               { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-2].exprval; }
#line default
        break;
      case 66: // expr -> expr2
#line 163 "tymake.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 67: // expr2 -> expr3, LOR, expr2
#line 166 "tymake.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LOR }; }
#line default
        break;
      case 68: // expr2 -> expr3
#line 167 "tymake.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 69: // expr3 -> expr4, LAND, expr3
#line 170 "tymake.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LAND }; }
#line default
        break;
      case 70: // expr3 -> expr4
#line 171 "tymake.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 71: // expr4 -> expr5, OR, expr4
#line 174 "tymake.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.OR }; }
#line default
        break;
      case 72: // expr4 -> expr5
#line 175 "tymake.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 73: // expr5 -> expr6, AND, expr5
#line 178 "tymake.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.AND }; }
#line default
        break;
      case 74: // expr5 -> expr6
#line 179 "tymake.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 75: // expr6 -> expr7, EQUALS, expr6
#line 182 "tymake.y"
                               { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.EQUALS }; }
#line default
        break;
      case 76: // expr6 -> expr7, NOTEQUAL, expr6
#line 183 "tymake.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.NOTEQUAL }; }
#line default
        break;
      case 77: // expr6 -> expr7
#line 184 "tymake.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 78: // expr7 -> expr8, LT, expr7
#line 187 "tymake.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LT }; }
#line default
        break;
      case 79: // expr7 -> expr8, GT, expr7
#line 188 "tymake.y"
                        { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GT }; }
#line default
        break;
      case 80: // expr7 -> expr8, LEQUAL, expr7
#line 189 "tymake.y"
                           { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LEQUAL }; }
#line default
        break;
      case 81: // expr7 -> expr8, GEQUAL, expr7
#line 190 "tymake.y"
                           { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GEQUAL }; }
#line default
        break;
      case 82: // expr7 -> expr8
#line 191 "tymake.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 83: // expr8 -> expr9, PLUS, expr8
#line 194 "tymake.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.PLUS }; }
#line default
        break;
      case 84: // expr8 -> expr9, MINUS, expr8
#line 195 "tymake.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.MINUS }; }
#line default
        break;
      case 85: // expr8 -> expr9
#line 196 "tymake.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 86: // expr9 -> expr10, MUL, expr9
#line 199 "tymake.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.MUL }; }
#line default
        break;
      case 87: // expr9 -> expr10
#line 200 "tymake.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 88: // expr10 -> NOT, expr10
#line 203 "tymake.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.NOT }; }
#line default
        break;
      case 89: // expr10 -> MINUS, expr10
#line 204 "tymake.y"
                      { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.MINUS }; }
#line default
        break;
      case 90: // expr10 -> expr11
#line 205 "tymake.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 91: // expr11 -> strlabelexpr
#line 208 "tymake.y"
                           { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 92: // expr11 -> INT
#line 209 "tymake.y"
                { CurrentSemanticValue.exprval = new IntExpression { val = ValueStack[ValueStack.Depth-1].intval }; }
#line default
        break;
      case 93: // expr11 -> arrayexpr
#line 210 "tymake.y"
                    { CurrentSemanticValue.exprval = new ArrayExpression { val = ValueStack[ValueStack.Depth-1].exprlist }; }
#line default
        break;
      case 94: // expr11 -> objexpr
#line 211 "tymake.y"
                   { CurrentSemanticValue.exprval = new ObjExpression { val = ValueStack[ValueStack.Depth-1].objdeflist }; }
#line default
        break;
      case 95: // expr11 -> DEFINED, LPAREN, LABEL, RPAREN
#line 212 "tymake.y"
                                  { CurrentSemanticValue.exprval = new Expression { a = new StringExpression { val = ValueStack[ValueStack.Depth-2].strval }, op = Tokens.DEFINED }; }
#line default
        break;
      case 96: // arrayexpr -> LBRACK, exprlist, RBRACK
#line 215 "tymake.y"
                                     { CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-2].exprlist; }
#line default
        break;
      case 97: // objexpr -> LBRACK, objlist, RBRACK
#line 218 "tymake.y"
                                   { CurrentSemanticValue.objdeflist = ValueStack[ValueStack.Depth-2].objdeflist; }
#line default
        break;
      case 98: // objlist -> objmember
#line 221 "tymake.y"
                          { CurrentSemanticValue.objdeflist = new List<ObjDef> { ValueStack[ValueStack.Depth-1].objdefval }; }
#line default
        break;
      case 99: // objlist -> objlist, COMMA, objmember
#line 222 "tymake.y"
                               { ValueStack[ValueStack.Depth-3].objdeflist.Add(ValueStack[ValueStack.Depth-1].objdefval); CurrentSemanticValue.objdeflist = ValueStack[ValueStack.Depth-3].objdeflist; }
#line default
        break;
      case 100: // objmember -> LABEL, ASSIGN, expr
#line 225 "tymake.y"
                                 { CurrentSemanticValue.objdefval = new ObjDef { name = ValueStack[ValueStack.Depth-3].strval, val = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 101: // funccall -> LABEL, LPAREN, exprlist, RPAREN
#line 228 "tymake.y"
                                        { CurrentSemanticValue.exprval = new FuncCall { target = ValueStack[ValueStack.Depth-4].strval, args = ValueStack[ValueStack.Depth-2].exprlist }; }
#line default
        break;
      case 102: // funcdef -> FUNCTION, LABEL, LPAREN, arglist, RPAREN, stmtblock
#line 231 "tymake.y"
                                                          { CurrentSemanticValue.stmtval = new FunctionStatement { name = ValueStack[ValueStack.Depth-5].strval, args = ValueStack[ValueStack.Depth-3].arglistval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 103: // arglist -> arglist, COMMA, arg
#line 234 "tymake.y"
                                { CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(ValueStack[ValueStack.Depth-3].arglistval); CurrentSemanticValue.arglistval.Add(ValueStack[ValueStack.Depth-1].argval); }
#line default
        break;
      case 104: // arglist -> arg
#line 235 "tymake.y"
                { CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(); CurrentSemanticValue.arglistval.Add(ValueStack[ValueStack.Depth-1].argval); }
#line default
        break;
      case 105: // arglist -> /* empty */
#line 236 "tymake.y"
             { CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(); }
#line default
        break;
      case 106: // argtype -> INTEGER
#line 239 "tymake.y"
                         { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Int; }
#line default
        break;
      case 107: // argtype -> STRING
#line 240 "tymake.y"
                  { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.String; }
#line default
        break;
      case 108: // argtype -> ARRAY
#line 241 "tymake.y"
                 { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Array; }
#line default
        break;
      case 109: // argtype -> OBJECT
#line 242 "tymake.y"
                  { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Object; }
#line default
        break;
      case 110: // argtype -> VOID
#line 243 "tymake.y"
                { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Void; }
#line default
        break;
      case 111: // arg -> argtype, LABEL
#line 246 "tymake.y"
                          { CurrentSemanticValue.argval = new FunctionStatement.FunctionArg { name = ValueStack[ValueStack.Depth-1].strval, argtype = ValueStack[ValueStack.Depth-2].typeval }; }
#line default
        break;
      case 112: // export -> EXPORT
#line 249 "tymake.y"
                       { CurrentSemanticValue.bval = true; }
#line default
        break;
      case 113: // export -> /* empty */
#line 250 "tymake.y"
             { CurrentSemanticValue.bval = false; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 254 "tymake.y"

internal Statement output;
#line default
}
}
