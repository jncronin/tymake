// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  DESKTOP-JOHN
// DateTime: 29/11/2014 13:40:33
// UserName: jncronin
// Input file <tymake.y - 29/11/2014 13:40:20>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using tymake;

namespace tymakeParse
{
internal enum Tokens {
    error=1,EOF=2,EQUALS=3,COLON=4,MUL=5,LPAREN=6,
    RPAREN=7,AMP=8,PLUS=9,MINUS=10,DOLLARS=11,COMMA=12,
    NEWLINE=13,FUNC=14,ASSIGN=15,NOT=16,NOTEQUAL=17,LEQUAL=18,
    GEQUAL=19,LBRACE=20,RBRACE=21,LBRACK=22,RBRACK=23,DOT=24,
    LT=25,GT=26,SEMICOLON=27,LOR=28,LAND=29,OR=30,
    AND=31,APPEND=32,ASSIGNIF=33,IF=34,ELSE=35,INCLUDE=36,
    RULEFOR=37,INPUTS=38,DEPENDS=39,ALWAYS=40,SHELLCMD=41,TYPROJECT=42,
    SOURCES=43,MKDIR=44,FUNCTION=45,RETURN=46,EXPORT=47,ISDIR=48,
    ISFILE=49,DEFINED=50,BUILD=51,INTEGER=52,STRING=53,VOID=54,
    FOR=55,FOREACH=56,IN=57,WHILE=58,DO=59,INT=60,
    LABEL=61};

internal partial struct ValueType
#line 17 "tymake.y"
{
#line 18 "tymake.y"
		public int intval;
#line 19 "tymake.y"
		public string strval;
#line 20 "tymake.y"
		public Statement stmtval;
#line 21 "tymake.y"
		public Expression exprval;
#line 22 "tymake.y"
		public List<Expression> exprlist;
#line 23 "tymake.y"
		public tymakeParse.Tokens tokval;
#line 24 "tymake.y"
		public Expression.EvalResult.ResultType typeval;
#line 25 "tymake.y"
		public FunctionStatement.FunctionArg argval;
#line 26 "tymake.y"
		public List<FunctionStatement.FunctionArg> arglistval;
#line 27 "tymake.y"
		public List<ObjDef> objdeflist;
#line 28 "tymake.y"
		public ObjDef objdefval;
#line 29 "tymake.y"
		public bool bval;
#line 30 "tymake.y"
	}
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[110];
  private static State[] states = new State[200];
  private static string[] nonTerms = new string[] {
      "file", "expr", "expr2", "expr3", "expr4", "expr5", "expr6", "expr7", "expr8", 
      "expr9", "expr10", "expr11", "strlabelexpr", "depends", "funccall", "labelexpr", 
      "labelexpr2", "stmtblock", "stmtlist", "stmt", "stmt2", "define", "ifblock", 
      "makerule", "cmd", "include", "strlabel", "funcdef", "forblock", "foreachblock", 
      "whileblock", "doblock", "dependsblock", "dependslist", "exprlist", "dependsstmt", 
      "inputsstmt", "arrayexpr", "assignop", "arg", "argtype", "arglist", "export", 
      "objmember", "objlist", "objexpr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{20,4,61,11,34,94,55,101,56,112,58,120,59,126,47,170,41,174,44,178,51,182,46,186,53,55,36,194,2,-2,37,-109,45,-109},new int[]{-1,1,-18,3,-19,199,-20,198,-21,8,-22,9,-23,93,-29,100,-30,111,-31,119,-32,125,-43,132,-25,172,-15,188,-13,189,-16,56,-17,57,-26,192});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{61,11,34,94,55,101,56,112,58,120,59,126,47,170,41,174,44,178,51,182,46,186,53,55,36,194,37,-109,45,-109},new int[]{-19,5,-20,198,-21,8,-22,9,-23,93,-29,100,-30,111,-31,119,-32,125,-43,132,-25,172,-15,188,-13,189,-16,56,-17,57,-26,192});
    states[5] = new State(new int[]{21,6,61,11,34,94,55,101,56,112,58,120,59,126,47,170,41,174,44,178,51,182,46,186,53,55,36,194,37,-109,45,-109},new int[]{-20,7,-21,8,-22,9,-23,93,-29,100,-30,111,-31,119,-32,125,-43,132,-25,172,-15,188,-13,189,-16,56,-17,57,-26,192});
    states[6] = new State(-13);
    states[7] = new State(-15);
    states[8] = new State(-16);
    states[9] = new State(new int[]{27,10});
    states[10] = new State(-17);
    states[11] = new State(new int[]{6,50,15,90,33,91,32,92,24,-11},new int[]{-39,12});
    states[12] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-2,13,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[13] = new State(-27);
    states[14] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-3,15,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[15] = new State(new int[]{7,16});
    states[16] = new State(-63);
    states[17] = new State(new int[]{28,18,27,-66,7,-66,12,-66,23,-66,20,-66,38,-66,39,-66,40,-66,21,-66});
    states[18] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-3,19,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[19] = new State(-65);
    states[20] = new State(new int[]{29,21,28,-68,27,-68,7,-68,12,-68,23,-68,20,-68,38,-68,39,-68,40,-68,21,-68});
    states[21] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-4,22,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[22] = new State(-67);
    states[23] = new State(new int[]{30,24,29,-70,28,-70,27,-70,7,-70,12,-70,23,-70,20,-70,38,-70,39,-70,40,-70,21,-70});
    states[24] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-5,25,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[25] = new State(-69);
    states[26] = new State(new int[]{31,27,30,-72,29,-72,28,-72,27,-72,7,-72,12,-72,23,-72,20,-72,38,-72,39,-72,40,-72,21,-72});
    states[27] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-6,28,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[28] = new State(-71);
    states[29] = new State(new int[]{3,30,17,88,31,-75,30,-75,29,-75,28,-75,27,-75,7,-75,12,-75,23,-75,20,-75,38,-75,39,-75,40,-75,21,-75});
    states[30] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-7,31,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[31] = new State(-73);
    states[32] = new State(new int[]{25,33,26,82,18,84,19,86,3,-80,17,-80,31,-80,30,-80,29,-80,28,-80,27,-80,7,-80,12,-80,23,-80,20,-80,38,-80,39,-80,40,-80,21,-80});
    states[33] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-8,34,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[34] = new State(-76);
    states[35] = new State(new int[]{9,36,10,80,25,-83,26,-83,18,-83,19,-83,3,-83,17,-83,31,-83,30,-83,29,-83,28,-83,27,-83,7,-83,12,-83,23,-83,20,-83,38,-83,39,-83,40,-83,21,-83});
    states[36] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-9,37,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[37] = new State(-81);
    states[38] = new State(new int[]{5,39,9,-85,10,-85,25,-85,26,-85,18,-85,19,-85,3,-85,17,-85,31,-85,30,-85,29,-85,28,-85,27,-85,7,-85,12,-85,23,-85,20,-85,38,-85,39,-85,40,-85,21,-85});
    states[39] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-10,40,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[40] = new State(-84);
    states[41] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-11,42,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[42] = new State(-86);
    states[43] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-11,44,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[44] = new State(-87);
    states[45] = new State(-88);
    states[46] = new State(new int[]{24,47,5,-89,9,-89,10,-89,25,-89,26,-89,18,-89,19,-89,3,-89,17,-89,31,-89,30,-89,29,-89,28,-89,27,-89,7,-89,12,-89,23,-89,20,-89,38,-89,39,-89,40,-89,21,-89});
    states[47] = new State(new int[]{61,49},new int[]{-17,48,-15,58});
    states[48] = new State(-10);
    states[49] = new State(new int[]{6,50,24,-11,5,-11,9,-11,10,-11,25,-11,26,-11,18,-11,19,-11,3,-11,17,-11,31,-11,30,-11,29,-11,28,-11,27,-11,7,-11,12,-11,23,-11,20,-11,38,-11,39,-11,40,-11,21,-11});
    states[50] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73,7,-58,12,-58},new int[]{-35,51,-3,77,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[51] = new State(new int[]{7,52,12,53});
    states[52] = new State(-99);
    states[53] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-3,54,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[54] = new State(-56);
    states[55] = new State(-7);
    states[56] = new State(-8);
    states[57] = new State(-9);
    states[58] = new State(-12);
    states[59] = new State(-90);
    states[60] = new State(-91);
    states[61] = new State(new int[]{16,41,10,43,53,55,61,78,60,59,22,61,50,73,23,-58,12,-58},new int[]{-35,62,-45,64,-3,77,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72,-44,79});
    states[62] = new State(new int[]{23,63,12,53});
    states[63] = new State(-94);
    states[64] = new State(new int[]{23,65,12,66});
    states[65] = new State(-95);
    states[66] = new State(new int[]{61,68},new int[]{-44,67});
    states[67] = new State(-97);
    states[68] = new State(new int[]{15,69});
    states[69] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-2,70,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[70] = new State(-98);
    states[71] = new State(-64);
    states[72] = new State(-92);
    states[73] = new State(new int[]{6,74});
    states[74] = new State(new int[]{61,75});
    states[75] = new State(new int[]{7,76});
    states[76] = new State(-93);
    states[77] = new State(-57);
    states[78] = new State(new int[]{6,50,15,69,24,-11,5,-11,9,-11,10,-11,25,-11,26,-11,18,-11,19,-11,3,-11,17,-11,31,-11,30,-11,29,-11,28,-11,23,-11,12,-11});
    states[79] = new State(-96);
    states[80] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-9,81,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[81] = new State(-82);
    states[82] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-8,83,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[83] = new State(-77);
    states[84] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-8,85,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[85] = new State(-78);
    states[86] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-8,87,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[87] = new State(-79);
    states[88] = new State(new int[]{16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-7,89,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[89] = new State(-74);
    states[90] = new State(-28);
    states[91] = new State(-29);
    states[92] = new State(-30);
    states[93] = new State(-18);
    states[94] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-2,95,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[95] = new State(new int[]{20,4},new int[]{-18,96});
    states[96] = new State(new int[]{35,97,61,-31,34,-31,55,-31,56,-31,58,-31,59,-31,47,-31,41,-31,44,-31,51,-31,46,-31,53,-31,36,-31,37,-31,45,-31,2,-31,21,-31});
    states[97] = new State(new int[]{20,4,34,94},new int[]{-18,98,-23,99});
    states[98] = new State(-32);
    states[99] = new State(-33);
    states[100] = new State(-19);
    states[101] = new State(new int[]{6,102});
    states[102] = new State(new int[]{61,110},new int[]{-22,103});
    states[103] = new State(new int[]{27,104});
    states[104] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-2,105,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[105] = new State(new int[]{27,106});
    states[106] = new State(new int[]{61,110},new int[]{-22,107});
    states[107] = new State(new int[]{7,108});
    states[108] = new State(new int[]{20,4},new int[]{-18,109});
    states[109] = new State(-34);
    states[110] = new State(new int[]{15,90,33,91,32,92},new int[]{-39,12});
    states[111] = new State(-20);
    states[112] = new State(new int[]{6,113});
    states[113] = new State(new int[]{61,114});
    states[114] = new State(new int[]{57,115});
    states[115] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-2,116,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[116] = new State(new int[]{7,117});
    states[117] = new State(new int[]{20,4},new int[]{-18,118});
    states[118] = new State(-35);
    states[119] = new State(-21);
    states[120] = new State(new int[]{6,121});
    states[121] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-2,122,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[122] = new State(new int[]{7,123});
    states[123] = new State(new int[]{20,4},new int[]{-18,124});
    states[124] = new State(-36);
    states[125] = new State(-22);
    states[126] = new State(new int[]{20,4},new int[]{-18,127});
    states[127] = new State(new int[]{58,128});
    states[128] = new State(new int[]{6,129});
    states[129] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-2,130,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[130] = new State(new int[]{7,131});
    states[131] = new State(-37);
    states[132] = new State(new int[]{37,135,45,156},new int[]{-24,133,-28,134});
    states[133] = new State(-23);
    states[134] = new State(-24);
    states[135] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73},new int[]{-2,136,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[136] = new State(new int[]{38,154,39,-43,40,-43,20,-43},new int[]{-37,137});
    states[137] = new State(new int[]{39,140,40,153,20,-41},new int[]{-36,138});
    states[138] = new State(new int[]{20,4},new int[]{-18,139});
    states[139] = new State(-38);
    states[140] = new State(new int[]{20,142},new int[]{-33,141});
    states[141] = new State(-39);
    states[142] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73,42,148,41,150,21,-55,12,-55},new int[]{-34,143,-14,152,-2,147,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[143] = new State(new int[]{21,144,12,145});
    states[144] = new State(-52);
    states[145] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73,42,148,41,150},new int[]{-14,146,-2,147,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[146] = new State(-54);
    states[147] = new State(-59);
    states[148] = new State(new int[]{53,55,61,49},new int[]{-13,149,-16,56,-17,57,-15,58});
    states[149] = new State(new int[]{24,47,21,-60,12,-60});
    states[150] = new State(new int[]{53,55,61,49},new int[]{-13,151,-16,56,-17,57,-15,58});
    states[151] = new State(new int[]{24,47,21,-61,12,-61});
    states[152] = new State(-53);
    states[153] = new State(-40);
    states[154] = new State(new int[]{20,142},new int[]{-33,155});
    states[155] = new State(-42);
    states[156] = new State(new int[]{61,157});
    states[157] = new State(new int[]{6,158});
    states[158] = new State(new int[]{52,166,53,167,54,168,7,-103,12,-103},new int[]{-42,159,-40,169,-41,164});
    states[159] = new State(new int[]{7,160,12,162});
    states[160] = new State(new int[]{20,4},new int[]{-18,161});
    states[161] = new State(-100);
    states[162] = new State(new int[]{52,166,53,167,54,168},new int[]{-40,163,-41,164});
    states[163] = new State(-101);
    states[164] = new State(new int[]{61,165});
    states[165] = new State(-107);
    states[166] = new State(-104);
    states[167] = new State(-105);
    states[168] = new State(-106);
    states[169] = new State(-102);
    states[170] = new State(new int[]{61,171,37,-108,45,-108});
    states[171] = new State(-47);
    states[172] = new State(new int[]{27,173});
    states[173] = new State(-25);
    states[174] = new State(new int[]{6,175});
    states[175] = new State(new int[]{53,55,61,49},new int[]{-13,176,-16,56,-17,57,-15,58});
    states[176] = new State(new int[]{7,177,24,47});
    states[177] = new State(-44);
    states[178] = new State(new int[]{6,179});
    states[179] = new State(new int[]{53,55,61,49},new int[]{-13,180,-16,56,-17,57,-15,58});
    states[180] = new State(new int[]{7,181,24,47});
    states[181] = new State(-45);
    states[182] = new State(new int[]{6,183});
    states[183] = new State(new int[]{53,55,61,49},new int[]{-13,184,-16,56,-17,57,-15,58});
    states[184] = new State(new int[]{7,185,24,47});
    states[185] = new State(-46);
    states[186] = new State(new int[]{6,14,16,41,10,43,53,55,61,49,60,59,22,61,50,73,27,-49},new int[]{-2,187,-3,71,-4,17,-5,20,-6,23,-7,26,-8,29,-9,32,-10,35,-11,38,-12,45,-13,46,-16,56,-17,57,-15,58,-38,60,-46,72});
    states[187] = new State(-48);
    states[188] = new State(new int[]{27,-50,24,-12});
    states[189] = new State(new int[]{24,190});
    states[190] = new State(new int[]{61,49},new int[]{-17,191,-15,58});
    states[191] = new State(new int[]{27,-51,24,-10});
    states[192] = new State(new int[]{27,193});
    states[193] = new State(-26);
    states[194] = new State(new int[]{53,196,61,197},new int[]{-27,195});
    states[195] = new State(-62);
    states[196] = new State(-5);
    states[197] = new State(-6);
    states[198] = new State(-14);
    states[199] = new State(new int[]{61,11,34,94,55,101,56,112,58,120,59,126,47,170,41,174,44,178,51,182,46,186,53,55,36,194,2,-4,37,-109,45,-109},new int[]{-20,7,-21,8,-22,9,-23,93,-29,100,-30,111,-31,119,-32,125,-43,132,-25,172,-15,188,-13,189,-16,56,-17,57,-26,192});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-47, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-18});
    rules[4] = new Rule(-1, new int[]{-19});
    rules[5] = new Rule(-27, new int[]{53});
    rules[6] = new Rule(-27, new int[]{61});
    rules[7] = new Rule(-13, new int[]{53});
    rules[8] = new Rule(-13, new int[]{-16});
    rules[9] = new Rule(-16, new int[]{-17});
    rules[10] = new Rule(-16, new int[]{-13,24,-17});
    rules[11] = new Rule(-17, new int[]{61});
    rules[12] = new Rule(-17, new int[]{-15});
    rules[13] = new Rule(-18, new int[]{20,-19,21});
    rules[14] = new Rule(-19, new int[]{-20});
    rules[15] = new Rule(-19, new int[]{-19,-20});
    rules[16] = new Rule(-20, new int[]{-21});
    rules[17] = new Rule(-21, new int[]{-22,27});
    rules[18] = new Rule(-21, new int[]{-23});
    rules[19] = new Rule(-21, new int[]{-29});
    rules[20] = new Rule(-21, new int[]{-30});
    rules[21] = new Rule(-21, new int[]{-31});
    rules[22] = new Rule(-21, new int[]{-32});
    rules[23] = new Rule(-21, new int[]{-43,-24});
    rules[24] = new Rule(-21, new int[]{-43,-28});
    rules[25] = new Rule(-21, new int[]{-25,27});
    rules[26] = new Rule(-21, new int[]{-26,27});
    rules[27] = new Rule(-22, new int[]{61,-39,-2});
    rules[28] = new Rule(-39, new int[]{15});
    rules[29] = new Rule(-39, new int[]{33});
    rules[30] = new Rule(-39, new int[]{32});
    rules[31] = new Rule(-23, new int[]{34,-2,-18});
    rules[32] = new Rule(-23, new int[]{34,-2,-18,35,-18});
    rules[33] = new Rule(-23, new int[]{34,-2,-18,35,-23});
    rules[34] = new Rule(-29, new int[]{55,6,-22,27,-2,27,-22,7,-18});
    rules[35] = new Rule(-30, new int[]{56,6,61,57,-2,7,-18});
    rules[36] = new Rule(-31, new int[]{58,6,-2,7,-18});
    rules[37] = new Rule(-32, new int[]{59,-18,58,6,-2,7});
    rules[38] = new Rule(-24, new int[]{37,-2,-37,-36,-18});
    rules[39] = new Rule(-36, new int[]{39,-33});
    rules[40] = new Rule(-36, new int[]{40});
    rules[41] = new Rule(-36, new int[]{});
    rules[42] = new Rule(-37, new int[]{38,-33});
    rules[43] = new Rule(-37, new int[]{});
    rules[44] = new Rule(-25, new int[]{41,6,-13,7});
    rules[45] = new Rule(-25, new int[]{44,6,-13,7});
    rules[46] = new Rule(-25, new int[]{51,6,-13,7});
    rules[47] = new Rule(-25, new int[]{47,61});
    rules[48] = new Rule(-25, new int[]{46,-2});
    rules[49] = new Rule(-25, new int[]{46});
    rules[50] = new Rule(-25, new int[]{-15});
    rules[51] = new Rule(-25, new int[]{-13,24,-17});
    rules[52] = new Rule(-33, new int[]{20,-34,21});
    rules[53] = new Rule(-34, new int[]{-14});
    rules[54] = new Rule(-34, new int[]{-34,12,-14});
    rules[55] = new Rule(-34, new int[]{});
    rules[56] = new Rule(-35, new int[]{-35,12,-3});
    rules[57] = new Rule(-35, new int[]{-3});
    rules[58] = new Rule(-35, new int[]{});
    rules[59] = new Rule(-14, new int[]{-2});
    rules[60] = new Rule(-14, new int[]{42,-13});
    rules[61] = new Rule(-14, new int[]{41,-13});
    rules[62] = new Rule(-26, new int[]{36,-27});
    rules[63] = new Rule(-2, new int[]{6,-3,7});
    rules[64] = new Rule(-2, new int[]{-3});
    rules[65] = new Rule(-3, new int[]{-4,28,-3});
    rules[66] = new Rule(-3, new int[]{-4});
    rules[67] = new Rule(-4, new int[]{-5,29,-4});
    rules[68] = new Rule(-4, new int[]{-5});
    rules[69] = new Rule(-5, new int[]{-6,30,-5});
    rules[70] = new Rule(-5, new int[]{-6});
    rules[71] = new Rule(-6, new int[]{-7,31,-6});
    rules[72] = new Rule(-6, new int[]{-7});
    rules[73] = new Rule(-7, new int[]{-8,3,-7});
    rules[74] = new Rule(-7, new int[]{-8,17,-7});
    rules[75] = new Rule(-7, new int[]{-8});
    rules[76] = new Rule(-8, new int[]{-9,25,-8});
    rules[77] = new Rule(-8, new int[]{-9,26,-8});
    rules[78] = new Rule(-8, new int[]{-9,18,-8});
    rules[79] = new Rule(-8, new int[]{-9,19,-8});
    rules[80] = new Rule(-8, new int[]{-9});
    rules[81] = new Rule(-9, new int[]{-10,9,-9});
    rules[82] = new Rule(-9, new int[]{-10,10,-9});
    rules[83] = new Rule(-9, new int[]{-10});
    rules[84] = new Rule(-10, new int[]{-11,5,-10});
    rules[85] = new Rule(-10, new int[]{-11});
    rules[86] = new Rule(-11, new int[]{16,-11});
    rules[87] = new Rule(-11, new int[]{10,-11});
    rules[88] = new Rule(-11, new int[]{-12});
    rules[89] = new Rule(-12, new int[]{-13});
    rules[90] = new Rule(-12, new int[]{60});
    rules[91] = new Rule(-12, new int[]{-38});
    rules[92] = new Rule(-12, new int[]{-46});
    rules[93] = new Rule(-12, new int[]{50,6,61,7});
    rules[94] = new Rule(-38, new int[]{22,-35,23});
    rules[95] = new Rule(-46, new int[]{22,-45,23});
    rules[96] = new Rule(-45, new int[]{-44});
    rules[97] = new Rule(-45, new int[]{-45,12,-44});
    rules[98] = new Rule(-44, new int[]{61,15,-2});
    rules[99] = new Rule(-15, new int[]{61,6,-35,7});
    rules[100] = new Rule(-28, new int[]{45,61,6,-42,7,-18});
    rules[101] = new Rule(-42, new int[]{-42,12,-40});
    rules[102] = new Rule(-42, new int[]{-40});
    rules[103] = new Rule(-42, new int[]{});
    rules[104] = new Rule(-41, new int[]{52});
    rules[105] = new Rule(-41, new int[]{53});
    rules[106] = new Rule(-41, new int[]{54});
    rules[107] = new Rule(-40, new int[]{-41,61});
    rules[108] = new Rule(-43, new int[]{47});
    rules[109] = new Rule(-43, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // file -> /* empty */
#line 48 "tymake.y"
{ output = new StatementList(); }
        break;
      case 3: // file -> stmtblock
#line 49 "tymake.y"
{ output = ValueStack[ValueStack.Depth-1].stmtval; }
        break;
      case 4: // file -> stmtlist
#line 50 "tymake.y"
{ output = ValueStack[ValueStack.Depth-1].stmtval; }
        break;
      case 5: // strlabel -> STRING
#line 53 "tymake.y"
{ CurrentSemanticValue.stmtval = new StringStatement { val = ValueStack[ValueStack.Depth-1].strval }; }
        break;
      case 6: // strlabel -> LABEL
#line 54 "tymake.y"
{ CurrentSemanticValue.stmtval = new LabelStatement { val = ValueStack[ValueStack.Depth-1].strval }; }
        break;
      case 7: // strlabelexpr -> STRING
#line 57 "tymake.y"
{ CurrentSemanticValue.exprval = new StringExpression { val = ValueStack[ValueStack.Depth-1].strval }; }
        break;
      case 8: // strlabelexpr -> labelexpr
#line 58 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 9: // labelexpr -> labelexpr2
#line 61 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 10: // labelexpr -> strlabelexpr, DOT, labelexpr2
#line 62 "tymake.y"
{ CurrentSemanticValue.exprval = new LabelMemberExpression { label = ValueStack[ValueStack.Depth-3].exprval, member = ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 11: // labelexpr2 -> LABEL
#line 65 "tymake.y"
{ CurrentSemanticValue.exprval = new LabelExpression { val = ValueStack[ValueStack.Depth-1].strval }; }
        break;
      case 12: // labelexpr2 -> funccall
#line 66 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 13: // stmtblock -> LBRACE, stmtlist, RBRACE
#line 69 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
        break;
      case 14: // stmtlist -> stmt
#line 72 "tymake.y"
{ StatementList sl = new StatementList(); sl.list = new List<Statement>(); sl.list.Add(ValueStack[ValueStack.Depth-1].stmtval); CurrentSemanticValue.stmtval = sl; }
        break;
      case 15: // stmtlist -> stmtlist, stmt
#line 73 "tymake.y"
{ ((StatementList)ValueStack[ValueStack.Depth-2].stmtval).list.Add(ValueStack[ValueStack.Depth-1].stmtval); CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
        break;
      case 16: // stmt -> stmt2
#line 76 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
        break;
      case 17: // stmt2 -> define, SEMICOLON
#line 79 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
        break;
      case 18: // stmt2 -> ifblock
#line 80 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
        break;
      case 19: // stmt2 -> forblock
#line 81 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
        break;
      case 20: // stmt2 -> foreachblock
#line 82 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
        break;
      case 21: // stmt2 -> whileblock
#line 83 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
        break;
      case 22: // stmt2 -> doblock
#line 84 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
        break;
      case 23: // stmt2 -> export, makerule
#line 85 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; ValueStack[ValueStack.Depth-1].stmtval.export = ValueStack[ValueStack.Depth-2].bval; }
        break;
      case 24: // stmt2 -> export, funcdef
#line 86 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; ValueStack[ValueStack.Depth-1].stmtval.export = ValueStack[ValueStack.Depth-2].bval; }
        break;
      case 25: // stmt2 -> cmd, SEMICOLON
#line 87 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
        break;
      case 26: // stmt2 -> include, SEMICOLON
#line 88 "tymake.y"
{ CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
        break;
      case 27: // define -> LABEL, assignop, expr
#line 91 "tymake.y"
{ CurrentSemanticValue.stmtval = new DefineExprStatement { tok_name = ValueStack[ValueStack.Depth-3].strval, assignop = ValueStack[ValueStack.Depth-2].tokval, val = ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 28: // assignop -> ASSIGN
#line 94 "tymake.y"
{ CurrentSemanticValue.tokval = Tokens.ASSIGN; }
        break;
      case 29: // assignop -> ASSIGNIF
#line 95 "tymake.y"
{ CurrentSemanticValue.tokval = Tokens.ASSIGNIF; }
        break;
      case 30: // assignop -> APPEND
#line 96 "tymake.y"
{ CurrentSemanticValue.tokval = Tokens.APPEND; }
        break;
      case 31: // ifblock -> IF, expr, stmtblock
#line 99 "tymake.y"
{ CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-2].exprval, if_block = ValueStack[ValueStack.Depth-1].stmtval, else_block = null }; }
        break;
      case 32: // ifblock -> IF, expr, stmtblock, ELSE, stmtblock
#line 100 "tymake.y"
{ CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-4].exprval, if_block = ValueStack[ValueStack.Depth-3].stmtval, else_block = ValueStack[ValueStack.Depth-1].stmtval }; }
        break;
      case 33: // ifblock -> IF, expr, stmtblock, ELSE, ifblock
#line 101 "tymake.y"
{ CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-4].exprval, if_block = ValueStack[ValueStack.Depth-3].stmtval, else_block = ValueStack[ValueStack.Depth-1].stmtval }; }
        break;
      case 34: // forblock -> FOR, LPAREN, define, SEMICOLON, expr, SEMICOLON, define, RPAREN, 
               //             stmtblock
#line 104 "tymake.y"
{ CurrentSemanticValue.stmtval = new ForBlockStatement { init = ValueStack[ValueStack.Depth-7].stmtval, test = ValueStack[ValueStack.Depth-5].exprval, incr = ValueStack[ValueStack.Depth-3].stmtval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
        break;
      case 35: // foreachblock -> FOREACH, LPAREN, LABEL, IN, expr, RPAREN, stmtblock
#line 107 "tymake.y"
{ CurrentSemanticValue.stmtval = new ForEachBlock { val = ValueStack[ValueStack.Depth-5].strval, enumeration = ValueStack[ValueStack.Depth-3].exprval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
        break;
      case 36: // whileblock -> WHILE, LPAREN, expr, RPAREN, stmtblock
#line 110 "tymake.y"
{ CurrentSemanticValue.stmtval = new WhileBlock { test = ValueStack[ValueStack.Depth-3].exprval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
        break;
      case 37: // doblock -> DO, stmtblock, WHILE, LPAREN, expr, RPAREN
#line 113 "tymake.y"
{ CurrentSemanticValue.stmtval = new DoBlock { test = ValueStack[ValueStack.Depth-2].exprval, code = ValueStack[ValueStack.Depth-5].stmtval }; }
        break;
      case 38: // makerule -> RULEFOR, expr, inputsstmt, dependsstmt, stmtblock
#line 116 "tymake.y"
{ CurrentSemanticValue.stmtval = new MakeRuleStatement { output_file = ValueStack[ValueStack.Depth-4].exprval, inputs_list = ValueStack[ValueStack.Depth-3].exprlist, depend_list = ValueStack[ValueStack.Depth-2].exprlist, rules = ValueStack[ValueStack.Depth-1].stmtval }; }
        break;
      case 39: // dependsstmt -> DEPENDS, dependsblock
#line 119 "tymake.y"
{ CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-1].exprlist; }
        break;
      case 40: // dependsstmt -> ALWAYS
#line 120 "tymake.y"
{ CurrentSemanticValue.exprlist = null; }
        break;
      case 41: // dependsstmt -> /* empty */
#line 121 "tymake.y"
{ CurrentSemanticValue.exprlist = new List<Expression>(); }
        break;
      case 42: // inputsstmt -> INPUTS, dependsblock
#line 124 "tymake.y"
{ CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-1].exprlist; }
        break;
      case 43: // inputsstmt -> /* empty */
#line 125 "tymake.y"
{ CurrentSemanticValue.exprlist = new List<Expression>(); }
        break;
      case 44: // cmd -> SHELLCMD, LPAREN, strlabelexpr, RPAREN
#line 128 "tymake.y"
{ CurrentSemanticValue.stmtval = new ShellCommandStatement { shell_cmd = ValueStack[ValueStack.Depth-2].exprval }; }
        break;
      case 45: // cmd -> MKDIR, LPAREN, strlabelexpr, RPAREN
#line 129 "tymake.y"
{ CurrentSemanticValue.stmtval = new MkDirCommandStatement { dir = ValueStack[ValueStack.Depth-2].exprval }; }
        break;
      case 46: // cmd -> BUILD, LPAREN, strlabelexpr, RPAREN
#line 130 "tymake.y"
{ CurrentSemanticValue.stmtval = new BuildCommandStatement { fname = ValueStack[ValueStack.Depth-2].exprval }; }
        break;
      case 47: // cmd -> EXPORT, LABEL
#line 131 "tymake.y"
{ CurrentSemanticValue.stmtval = new ExportStatement { v = ValueStack[ValueStack.Depth-1].strval }; }
        break;
      case 48: // cmd -> RETURN, expr
#line 132 "tymake.y"
{ CurrentSemanticValue.stmtval = new ReturnStatement { v = ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 49: // cmd -> RETURN
#line 133 "tymake.y"
{ CurrentSemanticValue.stmtval = new ReturnStatement { v = new ResultExpression { e = new Expression.EvalResult() } }; }
        break;
      case 50: // cmd -> funccall
#line 134 "tymake.y"
{ CurrentSemanticValue.stmtval = new ExpressionStatement { expr = ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 51: // cmd -> strlabelexpr, DOT, labelexpr2
#line 135 "tymake.y"
{ CurrentSemanticValue.stmtval = new ExpressionStatement { expr = new LabelMemberExpression { label = ValueStack[ValueStack.Depth-3].exprval, member = ValueStack[ValueStack.Depth-1].exprval } }; }
        break;
      case 52: // dependsblock -> LBRACE, dependslist, RBRACE
#line 138 "tymake.y"
{ CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-2].exprlist; }
        break;
      case 53: // dependslist -> depends
#line 141 "tymake.y"
{ CurrentSemanticValue.exprlist = new List<Expression> { ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 54: // dependslist -> dependslist, COMMA, depends
#line 142 "tymake.y"
{ List<Expression> l = new List<Expression>(ValueStack[ValueStack.Depth-3].exprlist); l.Add(ValueStack[ValueStack.Depth-1].exprval); CurrentSemanticValue.exprlist = l; }
        break;
      case 55: // dependslist -> /* empty */
#line 143 "tymake.y"
{ CurrentSemanticValue.exprlist = new List<Expression>(); }
        break;
      case 56: // exprlist -> exprlist, COMMA, expr2
#line 146 "tymake.y"
{ CurrentSemanticValue.exprlist = new List<Expression>(ValueStack[ValueStack.Depth-3].exprlist); CurrentSemanticValue.exprlist.Add(ValueStack[ValueStack.Depth-1].exprval); }
        break;
      case 57: // exprlist -> expr2
#line 147 "tymake.y"
{ CurrentSemanticValue.exprlist = new List<Expression> { ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 58: // exprlist -> /* empty */
#line 148 "tymake.y"
{ CurrentSemanticValue.exprlist = new List<Expression>(); }
        break;
      case 59: // depends -> expr
#line 151 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 60: // depends -> TYPROJECT, strlabelexpr
#line 152 "tymake.y"
{ CurrentSemanticValue.exprval = new ProjectDepends { project = ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 61: // depends -> SHELLCMD, strlabelexpr
#line 153 "tymake.y"
{ CurrentSemanticValue.exprval = new ShellCmdDepends { shellcmd = ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 62: // include -> INCLUDE, strlabel
#line 157 "tymake.y"
{ CurrentSemanticValue.stmtval = new IncludeStatement { include_file = ValueStack[ValueStack.Depth-1].stmtval }; }
        break;
      case 63: // expr -> LPAREN, expr2, RPAREN
#line 160 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-2].exprval; }
        break;
      case 64: // expr -> expr2
#line 161 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 65: // expr2 -> expr3, LOR, expr2
#line 164 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LOR }; }
        break;
      case 66: // expr2 -> expr3
#line 165 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 67: // expr3 -> expr4, LAND, expr3
#line 168 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LAND }; }
        break;
      case 68: // expr3 -> expr4
#line 169 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 69: // expr4 -> expr5, OR, expr4
#line 172 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.OR }; }
        break;
      case 70: // expr4 -> expr5
#line 173 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 71: // expr5 -> expr6, AND, expr5
#line 176 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.AND }; }
        break;
      case 72: // expr5 -> expr6
#line 177 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 73: // expr6 -> expr7, EQUALS, expr6
#line 180 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.EQUALS }; }
        break;
      case 74: // expr6 -> expr7, NOTEQUAL, expr6
#line 181 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.NOTEQUAL }; }
        break;
      case 75: // expr6 -> expr7
#line 182 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 76: // expr7 -> expr8, LT, expr7
#line 185 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LT }; }
        break;
      case 77: // expr7 -> expr8, GT, expr7
#line 186 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GT }; }
        break;
      case 78: // expr7 -> expr8, LEQUAL, expr7
#line 187 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LEQUAL }; }
        break;
      case 79: // expr7 -> expr8, GEQUAL, expr7
#line 188 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GEQUAL }; }
        break;
      case 80: // expr7 -> expr8
#line 189 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 81: // expr8 -> expr9, PLUS, expr8
#line 192 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.PLUS }; }
        break;
      case 82: // expr8 -> expr9, MINUS, expr8
#line 193 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.MINUS }; }
        break;
      case 83: // expr8 -> expr9
#line 194 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 84: // expr9 -> expr10, MUL, expr9
#line 197 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.MUL }; }
        break;
      case 85: // expr9 -> expr10
#line 198 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 86: // expr10 -> NOT, expr10
#line 201 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.NOT }; }
        break;
      case 87: // expr10 -> MINUS, expr10
#line 202 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.MINUS }; }
        break;
      case 88: // expr10 -> expr11
#line 203 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 89: // expr11 -> strlabelexpr
#line 206 "tymake.y"
{ CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
        break;
      case 90: // expr11 -> INT
#line 207 "tymake.y"
{ CurrentSemanticValue.exprval = new IntExpression { val = ValueStack[ValueStack.Depth-1].intval }; }
        break;
      case 91: // expr11 -> arrayexpr
#line 208 "tymake.y"
{ CurrentSemanticValue.exprval = new ArrayExpression { val = ValueStack[ValueStack.Depth-1].exprlist }; }
        break;
      case 92: // expr11 -> objexpr
#line 209 "tymake.y"
{ CurrentSemanticValue.exprval = new ObjExpression { val = ValueStack[ValueStack.Depth-1].objdeflist }; }
        break;
      case 93: // expr11 -> DEFINED, LPAREN, LABEL, RPAREN
#line 210 "tymake.y"
{ CurrentSemanticValue.exprval = new Expression { a = new StringExpression { val = ValueStack[ValueStack.Depth-2].strval }, op = Tokens.DEFINED }; }
        break;
      case 94: // arrayexpr -> LBRACK, exprlist, RBRACK
#line 213 "tymake.y"
{ CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-2].exprlist; }
        break;
      case 95: // objexpr -> LBRACK, objlist, RBRACK
#line 216 "tymake.y"
{ CurrentSemanticValue.objdeflist = ValueStack[ValueStack.Depth-2].objdeflist; }
        break;
      case 96: // objlist -> objmember
#line 219 "tymake.y"
{ CurrentSemanticValue.objdeflist = new List<ObjDef> { ValueStack[ValueStack.Depth-1].objdefval }; }
        break;
      case 97: // objlist -> objlist, COMMA, objmember
#line 220 "tymake.y"
{ ValueStack[ValueStack.Depth-3].objdeflist.Add(ValueStack[ValueStack.Depth-1].objdefval); CurrentSemanticValue.objdeflist = ValueStack[ValueStack.Depth-3].objdeflist; }
        break;
      case 98: // objmember -> LABEL, ASSIGN, expr
#line 223 "tymake.y"
{ CurrentSemanticValue.objdefval = new ObjDef { name = ValueStack[ValueStack.Depth-3].strval, val = ValueStack[ValueStack.Depth-1].exprval }; }
        break;
      case 99: // funccall -> LABEL, LPAREN, exprlist, RPAREN
#line 226 "tymake.y"
{ CurrentSemanticValue.exprval = new FuncCall { target = ValueStack[ValueStack.Depth-4].strval, args = ValueStack[ValueStack.Depth-2].exprlist }; }
        break;
      case 100: // funcdef -> FUNCTION, LABEL, LPAREN, arglist, RPAREN, stmtblock
#line 229 "tymake.y"
{ CurrentSemanticValue.stmtval = new FunctionStatement { name = ValueStack[ValueStack.Depth-5].strval, args = ValueStack[ValueStack.Depth-3].arglistval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
        break;
      case 101: // arglist -> arglist, COMMA, arg
#line 232 "tymake.y"
{ CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(ValueStack[ValueStack.Depth-3].arglistval); CurrentSemanticValue.arglistval.Add(ValueStack[ValueStack.Depth-1].argval); }
        break;
      case 102: // arglist -> arg
#line 233 "tymake.y"
{ CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(); CurrentSemanticValue.arglistval.Add(ValueStack[ValueStack.Depth-1].argval); }
        break;
      case 103: // arglist -> /* empty */
#line 234 "tymake.y"
{ CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(); }
        break;
      case 104: // argtype -> INTEGER
#line 237 "tymake.y"
{ CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Int; }
        break;
      case 105: // argtype -> STRING
#line 238 "tymake.y"
{ CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.String; }
        break;
      case 106: // argtype -> VOID
#line 239 "tymake.y"
{ CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Void; }
        break;
      case 107: // arg -> argtype, LABEL
#line 242 "tymake.y"
{ CurrentSemanticValue.argval = new FunctionStatement.FunctionArg { name = ValueStack[ValueStack.Depth-1].strval, argtype = ValueStack[ValueStack.Depth-2].typeval }; }
        break;
      case 108: // export -> EXPORT
#line 245 "tymake.y"
{ CurrentSemanticValue.bval = true; }
        break;
      case 109: // export -> /* empty */
#line 246 "tymake.y"
{ CurrentSemanticValue.bval = false; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 250 "tymake.y"

#line 251 "tymake.y"
internal Statement output;
}
}
